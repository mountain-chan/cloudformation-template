Description: Chan Demo
Parameters:
  AppName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: chan-demo
  BackendPort:
    Type: Number
    Description: Backend app port
    Default: 5012
  ContainerName:
    Type: String
    Description: Container name
    Default: "demo"
  TargetGroupName:
    Type: String
    Description: Target group name
    Default: "ecs-chan-demo"
  LoadBalancerName:
    Type: String
    Description: Load Balancer Name
    Default: "chan-demo"
  HealthCheckPath:
    Type: String
    Description: Health Check Path
    Default: "/api/v1/menu"

Resources:
# Create VPC, subnets and config
  EC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Creator
          Value: ChanLy
        - Key: Name
          Value: ChanDemo

  EC2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.0.0/22
      AvailabilityZone: "ap-southeast-1a"
      Tags:
        - Key: Name
          Value: ChanDemo Subnet1

  EC2Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.4.0/22
      AvailabilityZone: "ap-southeast-1b"
      Tags:
        - Key: Name
          Value: ChanDemo Subnet2

  EC2Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.8.0/22
      AvailabilityZone: "ap-southeast-1c"
      Tags:
        - Key: Name
          Value: ChanDemo Subnet3

  EC2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ChanDemo

  EC2VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - EC2VPC
      - EC2InternetGateway
    Properties:
      VpcId: !Ref EC2VPC
      InternetGatewayId: !Ref EC2InternetGateway

  EC2RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - EC2VPC
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: Name
          Value: ChanDemo

  EC2Route:
    Type: AWS::EC2::Route
    DependsOn:
      - EC2VPCGatewayAttachment
      - EC2RouteTable
    Properties:
      RouteTableId: !Ref EC2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EC2InternetGateway

# Create Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - EC2VPCGatewayAttachment
    Properties:
      GroupName: "ChanTest"
      GroupDescription: Chan test create security group from cloudformation
      VpcId: !Ref EC2VPC
      Tags:
        - Key: Creator
          Value: ChanLy
        - Key: Name
          Value: Chan Demo
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "HTTP"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: "Backend Port"
          FromPort: !Ref BackendPort
          ToPort: !Ref BackendPort
          CidrIp: 0.0.0.0/0

# Create Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "chan-demo"
      Tags:
        - Key: Creator
          Value: ChanLy

# Create ECS and TaskDefinition
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ChanTestCluster
      Tags:
        - Key: Creator
          Value: ChanLy

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECRRepository
      - ECSCluster
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: "CustomECSTaskExecutionRole"
      ExecutionRoleArn: "CustomECSTaskExecutionRole"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "awsvpc"
      Tags:
        - Key: Creator
          Value: ChanLy
      ContainerDefinitions:
        - Name: "demo"
          Image: !GetAtt ECRRepository.RepositoryUri
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: !Ref BackendPort
              HostPort: !Ref BackendPort
              Protocol: "tcp"
          Environment:
            - Name: "ENV"
              Value: "stg"

# Create TargetGroup, LoadBalancer and Listener
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      TargetType: "ip"
      Port: 80
      Protocol: "HTTP"
      ProtocolVersion: "HTTP1"
      VpcId: !Ref EC2VPC
      HealthCheckProtocol: "HTTP"
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheckPath

  ELBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - ELBTargetGroup
    Properties:
      Name: !Ref LoadBalancerName
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Subnets:
        - !Ref EC2Subnet1
        - !Ref EC2Subnet2

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ELBTargetGroup
      - ELBLoadBalancer
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELBLoadBalancer
      Port: 80
      Protocol: "HTTP"

# Create Services
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSTaskDefinition
      - ELBTargetGroup
      - ELBLoadBalancer
      - ELBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: "FARGATE"
      Tags:
        - Key: Creator
          Value: ChanLy
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 10
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref EC2SecurityGroup
          Subnets:
            - !Ref EC2Subnet1
            - !Ref EC2Subnet2
      LoadBalancers:
        - TargetGroupArn: !Ref ELBTargetGroup
          ContainerPort: !Ref BackendPort
          ContainerName: !Ref ContainerName